OAuth2.0
외부 서비스의 인증 및 권한 부여를 관리하는 프레임워크이다. 즉, 인증과 허가를 포함한다.
OAuth2.0의 동작 방식은 구글 로그인이 대표적인 예시가 된다.
1. 우선 유저가 구글 로그인 페이지에서 로그인을 한다. (유저->구글)
2. 로그인이 성공하면, 유저가 구글로부터 권한 증서를 받는다. (구글->유저)
3. 유저는 이 권한 증서를 클라이언트에게 준다. (유저->클라이언트)
4. 클라이언트는 이 권한을 가지고 구글 서버에서 access token을 받는다. (클라이언트->구글->클라이언트)
5. 클라이언트는 유저에게 access token을 주고, 유저가 접근 요청을 할 때마다 이 토큰을 확인한다. (클라이언트->유저->클라이언트)
6. 클라이언트가 구글에게 access token을 보내고, 구글은 이 토큰을 가지고 권한 여부를 판별하여 클라이언트에게 알려준다. (클라이언트->구글->클라이언트)

위와 같은 과정으로 구글 로그인이 진행된다. 꼭 구현해보고 싶은 기능인 소셜 로그인 구현에 반드시 필요한 지식이므로 확실히 알아놔야겠다.

쿠키
클라이언트 로컬에 저장된다.
document.cookie="key=value;" 의 형태로 생성한다.
document.cookie의 형태로 가져온다.

쿠키를 삭제할 때는 만료일을 현재 날짜보다 앞당겨서 지우는 방법을 사용한다.
document.cookie="key=value; expires=날짜"

세션 스토리지와 로컬 스토리지는
데이터 추가할 때 setItem(key, value)
데이터 불러올 때 getItem(key)
데이터 삭제할 때 removeItem(key)
의 형태로 사용한다.
둘의 차이는 명백하다. 세션 스토리지에 저장된 데이터는 창이 닫힐 경우 제거된다. 로컬 스토리지에서는 유저가 삭제하지 않는 이상 데이터가 유지된다.
