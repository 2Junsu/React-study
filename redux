-redux 용어
1. State : 리덕스에서 저장하고 있는 상태값(=데이터)

2. Action : 상태에 변화가 필요할 때 발생(=가지고 있는 데이터 변경할 때)
액션은 객체임 {type: ~, data: ~}

3. ActionCreator : 액션 생성 함수. 액션을 리턴한다.

4. Reducer : 리덕스에 저장된 상태(=데이터)를 변경하는 함수
액션 생성 함수 호출 -> 액션 생성 -> 리듀서가 현재 상태, 액션 객체 받음 -> 새로운 데이터 생성 -> 리턴

5. Store : 프로젝트에 리덕스 적용하기 위해 쓰임

6. dispatch : 액션을 발생시킴

-redux 특징
1. store는 1개만 씀
2. store의 state(데이터)는 action으로만 변경 가능 -> 데이터의 불변성을 유지하기 위해
ex) A에 1을 더할 때, A=A+1이 아닌 A'=A+1을 만들고 A를 A'로 바꿈
3. 어떤 요청이 와도 리듀서는 같은 동작을 한다.(리듀서는 파라미터가 같으면 항상 같은 값을 반환하는 '순수한 함수'여야 한다.)

-redux 상태관리 흐름
1. 리덕스 store를 component에 연결
2. component에서 상태 변화가 필요할 때 Action 호출
3. Reducer 통해서 새로운 상태값 만듦
4. 새 상태값 store에 저장
5. component는 새로운 상태값 받아옴(리랜더링됨)

-ActionCreator를 component에서 쓰기 위해 export를 해야 하는데, 이때 export와 export default의 차이점
export : {}안에 여러 개 불러오기 가능
export default : {}없이 하나만 불러오기 가능 (한 파일 당 하나만 쓸 수 있음)
Reducer를 export default로 빼줄 거라서 ActionCreator는 export로 씀

-combineReducers 및 createStore를 사용하여 스토어 생성
-index.js에서 Provider를 사용하여 리덕스와 컴포넌트 연결
-useSelector를 사용하여 스토어에서 상태값 불러오기
-useDispatch를 사용하여 액션 생성 함수 불러오기
